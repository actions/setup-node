Setup Node.js environment By actions v3.5.0 2.4k Setup a Node.js environment by adding problem matchers and optionally downloading and adding it to the PATH

View full Marketplace listing Installation Copy and paste the following snippet into your .yml file.

Version: v3.5.0

name: Setup Node.js environment uses: actions/setup-node@v3.5.0 with:
Set always-auth in npmrc.
always-auth: # optional, default is false
Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
node-version: # optional
File containing the version Spec of the version to use. Examples: .nvmrc, .node-version, .tool-versions.
node-version-file: # optional
Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
architecture: # optional
Set this option if you want the action to check for the latest available version that satisfies the version spec.
check-latest: # optional
Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
registry-url: # optional
Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
scope: # optional
Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user.
token: # optional, default is ${{ github.token }}
Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
cache: # optional
Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
cache-dependency-path: # optional: Request :Push'' Push:: branches'' '-'' 'branches :'-'' '['' '"paradice'"'' ']'' : pull_request: branches: [ "paradice" ] job : build: runs-on: ubuntu-latest strategy: max-parallel: 4 matrix: python-version: [3.7, 3.8, 3.9 steps:
uses: actions/checkout@v3
name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v3 with: python-version: ${{ matrix.python-version }}
name: Install Dependencies run: | python -m pip install --upgrade pip pip install -r requirements.txt
name: Run Tests run: | python manage.py test
This workflow will triage pull requests and apply a label based on the
paths that are modified in the pull request.
To use this workflow, you will need to set up a .github/labeler.yml
file with configuration. For more information, see:
https://github.com/actions/labeler
name: Labeler on: [pull_request] jobs: label: runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: actions/labeler@v4 with: repo-token: "${{ secrets.GITHUB_TOKEN }}" name: Deploy Hugo site to Pages on:

Runs on pushes targeting the default branch
push: branches: ["paradice"]

Allows you to run this workflow manually from the Actions tab
workflow_dispatch:

Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions: contents: write-prettier.config'' pages: write id-token: write

Allow one concurrent deployment
concurrency: group: "pages" cancel-in-progress: true

Default to bash
defaults: run: shell: bash jobs:

Build job
build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.108.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb
&& sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass Embedded run: sudo snap install dart-sass-embedded - name: Checkout uses: actions/checkout@v3 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v2 - name: Install Node.js dependencies run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true" - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo
--minify
--baseURL "${{ steps.pages.outputs.base_url }}/" - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public

Deployment job
deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 To install the Stripe CLI on Linux without a package manager: docker run --rm -it stripe/stripe-cli:latest Download the latest linux tar.gz file from https://github.com/stripe/stripe-cli/releases/latest Unzip the file: tar -xvf stripe_X.X.X_linux_x86_64.tar.gz Move ./stripe to your execution path. name: Deploy Hugo site to Pages on:

Runs on pushes targeting the default branch
push: branches: ["paradice"]

Allows you to run this workflow manually from the Actions tab
workflow_dispatch:

Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions: contents: write-prettier.config'' pages: write id-token: write

Allow one concurrent deployment
concurrency: group: "pages" cancel-in-progress: true

Default to bash
defaults: run: shell: bash jobs:

Build job
build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.108.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb
&& sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass Embedded run: sudo snap install dart-sass-embedded - name: Checkout uses: actions/checkout@v3 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v2 - name: Install Node.js dependencies run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true" - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo
--minify
--baseURL "${{ steps.pages.outputs.base_url }}/" - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public

Deployment job
deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 Search documentation... try “API keys” Unnamed account Home Payments Business operations Financial services Developer tools No-code All products APIs & SDKs Support Dashboard HomeDeveloper toolsStripe Apps Extension SDK API reference Beta An index of all fields, types, and descriptions for the Extension SDK API. UI extensions have access to context props and utility functions that let them interact with an app’s users and the Stripe Dashboard ecosystem. This page documents these values and functions. Props Views are passed props that the extension can use for context on where the extension is being displayed. Your view can take some or all of these props as arguments, and they’re of type ExtensionContextValue. import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context'; const ExampleApp = ({userContext, environment, oauthContext}: ExtensionContextValue) => { ... } User context The userContext prop has data about the end user using your app, including these fields: FIELD TYPE EXAMPLE name string Jenny Rosen The app user’s name account.country string UK The app user’s country account.id string acct_1032D82eZvKYlo2C The app user’s account ID account.name string Jenny’s Llama Emporium The name of the Stripe account locale string en-GB The app user’s system language ID Environment The environment prop has data about the page a user is viewing, including these fields: FIELD TYPE EXAMPLE viewportID string stripe.dashboard.payment.list Current viewport rendering your view mode ‘live’ | ‘test’ live The Stripe API mode the current page is in objectContext.id string ch_3L0pjB2eZvKYlo2C1u1vZ7aK In the ObjectView objects, this is the ID of the current object the user views in the Dashboard. objectContext.object string charge In the ObjectView objects, this is the type of the current object the user views in the Dashboard. constants Object {"API_BASE": "https://api.example.com/v1"} An object with arbitrary constant values passed from the app manifest that can be overridden for local development using the CLI manifest flag. OAuth context The oauthContext prop contains information about the current OAuth workflow, if one is underway. FIELD TYPE EXAMPLE error string none OAuth error code code string none OAuth authorization code state string none OAuth state used by your app verifier string none OAuth code verifier Utility functions The UI extension SDK provides these functions to help apps interact with the Stripe API and the Dashboard user. clipboardWriteText—Write text to the end user’s clipboard. createOAuthState—Obtain values to use when you create an authorization link in an OAuth workflow. fetchStripeSignature—Get a signature from Stripe’s servers. getDashboardUserEmail—Get the end user’s email address. showToast—Show a toast message to the user. useRefreshDashboardData—Enable your view to update data on the Dashboard. clipboardWriteText Write text to the app user’s clipboard. The user can then paste it as if they had copied it. ARGUMENT TYPE EXAMPLE text string Hello, world! Text to copy To use this function, first import it from the SDK: import {clipboardWriteText} from '@stripe/ui-extension-sdk/utils'; For example, provide a button that copies Hello, world! to the clipboard when pressed. In a real app, you could use this to copy an address, invoice number, or other important detail. import {useCallback} from 'react'; import {Button} from '@stripe/ui-extension-sdk/ui'; import {clipboardWriteText} from '@stripe/ui-extension-sdk/utils'; const App = () => { const writeToClipboard = useCallback(async () => { try { await clipboardWriteText('Hello, world!'); // Writing to the clipboard succeeded } catch (e) { // Writing to the clipboard failed } }, []); return ( Copy to clipboard ); }; createOAuthState Obtain state and challenge values to use when you create an authorization link in an OAuth workflow. To use this function, first import it from the SDK. import {createOAuthState} from '@stripe/ui-extension-sdk/utils'; For an example in context, see Add authorization workflows. fetchStripeSignature Get a signature from Stripe’s servers. Your UI extension can use this signature to send signed requests to your app’s backend. To use this function, first import it from the SDK. import fetchStripeSignature from '@stripe/ui-extension-sdk/utils'; For more details and an example in context, see server-side logic docs. getDashboardUserEmail Get the app user’s email address. To use this function, first import it from the SDK. import {getDashboardUserEmail} from '@stripe/ui-extension-sdk/utils'; You must also include the user_email_read permission in your app manifest. Add it using a CLI command or edit the app manifest file directly. CLI command App manifest Command Line stripe apps grant permission user_email_read "EXPLANATION" For example, access the app user’s email in a view by getting it using the getDashboardUserEmail function and storing it in a React state variable. import {useEffect, useState} from 'react'; import {getDashboardUserEmail} from '@stripe/ui-extension-sdk/utils'; export const useDashboardUserEmail = () => { const [email, setEmail] = useState<string | null>(null); const fetchEmail = async () => { try { const {email} = await getDashboardUserEmail(); setEmail(email); } catch(e) { console.error(e); } }; useEffect(() => { fetchEmail(); }, []); return email; }; const App = () => { const dashboardUserEmail = useDashboardUserEmail(); ... }; showToast Render a toast at the bottom of your view to inform the user about the status of an action. For example, a toast can show a user whether an API call succeeded or failed. import {showToast} from '@stripe/ui-extension-sdk/utils'; const App = () => { const handleClick = () => { fetch(...) .then((response) => { showToast("Invoice updated", {type: "success"}) return response.json() }) .catch(() => { showToast("Invoice could not be updated", {type: "caution"}) }) } // Use the handleClick... } The showToast() function takes two arguments, a message and options. The function is defined as follows: type ToastType = "success" | "caution" | "pending" | undefined; type ToastOptions = { type?: ToastType; action?: string; onAction: () => void; } (message: string, options?: ToastOptions) => Promise<{ update: (updateMessage: string, updateOptions?: ToastOptions) => void; dismiss: () => void; }>; Toast messages can’t exceed 30 characters in length or be empty. If a message is too long or empty, the console logs an error. Unless they’re of type pending, toasts dismiss automatically. IS PENDING HAS ACTION TIMEOUT false false 4s false true 6s true false None true true None import {showToast} from '@stripe/ui-extension-sdk/utils'; const App = () => { const handleClick = async () => { const { dismiss, update } = await showToast("Refreshing data", { type: "pending", }); try { await refreshData(); dismiss(); } catch (error) { update("Data could not be refreshed", { type: "caution" }); } } // Use the handleClick... } Toasts can also prompt the user to take an action. Clicking the action button automatically dismisses the toast. import {showToast} from '@stripe/ui-extension-sdk/utils'; const App = () => { const handleClick = async () => { let timeout; const { dismiss } = await showToast('Message "sent"', { action: "Undo", onAction: () => { clearTimeout(timeout); showToast('Message "unsent"'); }, }); timeout = setTimeout(() => { sendMessage(); dismiss(); }, 3000); } // Use the handleClick... } useRefreshDashboardData Enable your view to update data in the Dashboard. This function returns another callback function. Store that callback, and call it when Stripe data changes. When you call it, the Dashboard updates to reflect the new values. To use this function, first import it from the SDK. import {useRefreshDashboardData} from '@stripe/ui-extension-sdk/utils'; For instance, on a customer detail page, get the callback function that refreshes Dashboard data, and then call it after updating the current customer. import {useCallback} from 'react'; import {useRefreshDashboardData} from '@stripe/ui-extension-sdk/utils'; const App = () => { const refreshDashboardData = useRefreshDashboardData(); const updateCustomer = useCallback(async () => { try { await updateCurrentCustomer(); await refreshDashboardData(); } catch (error) {} }, [refreshDashboardData]); } For more information, view docs on accessing Stripe objects in the Dashboard. See also How UI extensions work Viewports reference Was this page helpful? Yes No Questions? Contact us. Watch our developer tutorials. BEGIN:'' GLOW7:' :'".txt RUN::/[Patch].diff'@bitore.sig/BITORE//GitHub/Workflows/javascript/Tests/ci/test/travis.yml Name: bitore.sig title: BITORE/workflows/blank.yml b/.github/workflows/blank.yml index 30a4bc1..d61c51e 100644 --- a/.github/workflows/blank.yml +++ b/.github/workflows/blank.yml @@ -1,6 +1,6 @@

This is a basic workflow to help you get started with Actions
diff --git a/.github/workflows/blank.yml b/.github/workflows/blank.yml index 30a4bc1..d61c51e 100644 --- a/.github/workflows/blank.yml +++ b/.github/workflows/blank.yml @@ -1,6 +1,6 @@

This is a basic workflow to help you get started with Actions
-name: CI +name: ci

Controls when the workflow will run
on: @@ -23,7 +23,7 @@ jobs: # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

 - uses: actions/checkout@v2
 - uses: actions/checksout@v2
-->- name: Login to Packages Container registry -->- name: Login to Packages Container registry uses: docker/login-action@v1 uses: docker/login-action@v1 with: with: registry: 
{{ env.REGISTRY }} username: 
{{ github.actor }}

     password: ${{ secrets.PAT }}	-          password: ${{ secrets.PAT }}
     password: ${{ secrets.GITHUB_TOKEN }}env.REGISTRY'	+          password: ${{ secrets.GITHUB_TOKEN }}env.REGISTRY"-------------branches": "'[main']":,
----------branches": "'[main']":,

title": "constructing...branches...initializing_final_request..., "title": "constructing...branches...initializing_final_request...,

"...":, "...":,

"...":, "...":, "...":, "...":, "...100'%...finishing..complete...Done.::returns:Response: "...100'%...finishing..complete...Done.::returns:Response: Response:403OK...','...','...=>:404=>redirect.repositories'@usr/bin/bash/user/bin/Bash/bitore.sig/'@repository:type:containers-crates.io/anchors-analysis'@iixixi/iixixi'@.github/workflows/Doc/JavaScript/ci/test/.travis.yml/heroku.js Response:403OK...','...','...=>:404=>redirect.repositories'@usr/bin/bash/user/bin/Bash/bitore.sig/'@repository:type:containers-crates.io/anchors-analysis'@iixixi/iixixi'@.github/workflows/Doc/JavaScript/ci/test/.travis.yml/heroku.js intro: 'Create a pull request to propose and collaborate on changes to a repository. These changes are proposed in a branch, which ensures that the default branch only contains finished and approved work.' intro: 'Create a pull request to propose and collaborate on changes to a repository. These changes are proposed in a branch, which ensures that the default branch only contains finished and approved work.' permissions: 'Anyone with read access to a repository can create a pull request. {% data reusables.enterprise-accounts.emu-permission-propose %}' permissions: 'Anyone with read access to a repository can create a pull request. {% data reusables.enterprise-accounts.emu-permission-propose %}' redirect_from: redirect_from:

/github/collaborating-with-issues-and-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request - /github/collaborating-with-issues-and-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request
/articles/creating-a-pull-request - /articles/creating-a-pull-request
/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request - /github/collaborating-with-issues-and-pull-requests/creating-a-pull-request versions: versions: topics: topics:
Pulls Request - Pulls Request ---branches": "-'[' trunk' ']":, ---branches": "-'[' trunk' ']":, If you want to create a new branch for your pull request and do not have write permissions to the repository, you can fork the repository first. For more information, see "Creating a pull request from a fork" and "About forks." If you want to create a new branch for your pull request and do not have write permissions to the repository, you can fork the repository first. For more information, see "Creating a pull request from a fork" and "About forks." You can specify which branch you'd like to merge your changes into when you create your pull request. Pull requests can only be opened between two branches that are different. You can specify which branch you'd like to merge your changes into when you create your pull request. Pull requests can only be opened between two branches that are different. {% data reusables.pull_requests.perms-to-open-pull-request %} {% data reusables.pull_requests.perms-to-open-pull-request %} {% data reusables.pull_requests.close-issues-using-keywords %} {% data reusables.pull_requests.close-issues-using-keywords %}
Changing the branch range and destination repository ## Changing the branch range and destination repository
By default, pull requests are based on the parent repository's default branch. For more information, see "About branches." By default, pull requests are based on the parent repository's default branch. For more information, see "About branches." If the default parent repository isn't correct, you can change both the parent repository and the branch with the drop-down lists. You can also swap your head and base branches with the drop-down lists to establish diffs between reference points. References here must be branch names in your GitHub repository. If the default parent repository isn't correct, you can change both the parent repository and the branch with the drop-down lists. You can also swap your head and base branches with the drop-down lists to establish diffs between reference points. References here must be branch names in your GitHub repository. Pull Request editing branches Pull Request editing branches When thinking about branches, remember that the base branch is where changes should be applied, the head branch contains what you would like to be applied. When thinking about branches, remember that the base branch is where changes should be applied, the head branch contains what you would like to be applied. When you change the base repository, you also change notifications for the pull request. Everyone that can push to the base repository will receive an email notification and see the new pull request in their dashboard the next time they sign in. When you change the base repository, you also change notifications for the pull request. Everyone that can push to the base repository will receive an email notification and see the new pull request in their dashboard the next time they sign in. When you change any of the information in the branch range, the Commit and Files changed preview areas will update to show your new range. When you change any of the information in the branch range, the Commit and Files changed preview areas will update to show your new range. {% tip %} {% tip %} Tips: Tips:

Using the compare view, you can set up comparisons across any timeframe. For more information, see "Comparing commits." - Using the compare view, you can set up comparisons across any timeframe. For more information, see "Comparing commits."
Project maintainers can add a pull request template for a repository. Templates include prompts for information in the body of a pull request. For more information, see "About issue and pull request templates." - Project maintainers can add a pull request template for a repository. Templates include prompts for information in the body of a pull request. For more information, see "About issue and pull request templates." {% endtip %} {% endtip %}
Creating the pull request ## Creating the pull request
{% webui %} {% webui %} {% data reusables.repositories.navigate-to-repo %} {% data reusables.repositories.navigate-to-repo %} 2. In the "Branch" menu, choose the branch that contains your commits. 2. In the "Branch" menu, choose the branch that contains your commits. Branch dropdown menu Branch dropdown menu {% data reusables.repositories.new-pull-request %} {% data reusables.repositories.new-pull-request %} 4. Use the base branch dropdown menu to select the branch you'd like to merge your changes into, then use the compare branch drop-down menu to choose the topic branch you made your changes in. 4. Use the base branch dropdown menu to select the branch you'd like to merge your changes into, then use the compare branch drop-down menu to choose the topic branch you made your changes in. Drop-down menus for choosing the base and compare branches Drop-down menus for choosing the base and compare branches {% data reusables.repositories.pr-title-description %} {% data reusables.repositories.pr-title-description %} {% data reusables.repositories.create-pull-request %} {% data reusables.repositories.create-pull-request %} {% data reusables.repositories.asking-for-review %} {% data reusables.repositories.asking-for-review %} After your pull request has been reviewed, it can be merged into the repository. After your pull request has been reviewed, it can be merged into the repository. {% endwebui %} {% endwebui %} {% cli %} {% cli %} {% data reusables.cli.cli-learn-more %} {% data reusables.cli.cli-learn-more %} To create a pull request, use the gh pr create subcommand. To create a pull request, use the gh pr create subcommand. shell	shell gh pr create gh pr create 	 To assign a pull request to an individual, use the --assignee or -a flags. You can use @me to self-assign the pull request. To assign a pull request to an individual, use the --assignee or -a flags. You can use @me to self-assign the pull request. shell	shell gh pr create --assignee "@octocat" gh pr create --assignee "@octocat" 	 To specify the branch into which you want the pull request merged, use the --base or -B flags. To specify the branch that contains commits for your pull request, use the --head or -H flags. To specify the branch into which you want the pull request merged, use the --base or -B flags. To specify the branch that contains commits for your pull request, use the --head or -H flags. shell	shell gh pr create --base my-base-branch --head my-changed-branch gh pr create --base my-base-branch --head my-changed-branch 	 To include a title and body for the new pull request, use the --title and --body flags. To include a title and body for the new pull request, use the --title and --body flags. shell	shell gh pr create --title "The bug is fixed" --body "Everything works again" gh pr create --title "The bug is fixed" --body "Everything works again" 	 To mark a pull request as a draft, use the --draft flag. To mark a pull request as a draft, use the --draft flag. shell	shell gh pr create --draft gh pr create --draft 	 To add a labels or milestones to the new pull request, use the --label and --milestone flags. To add a labels or milestones to the new pull request, use the --label and --milestone flags. shell	shell gh pr create --label "bug,help wanted" --milestone octocat-milestone gh pr create --label "bug,help wanted" --milestone octocat-milestone 	 To add the new pull request to a specific project, use the --project flag. To add the new pull request to a specific project, use the --project flag. shell	shell gh pr create --project octocat-project gh pr create --project octocat-project 	 To assign an individual or team as reviewers, use the --reviewer flag. To assign an individual or team as reviewers, use the --reviewer flag. shell	shell gh pr create --reviewer monalisa,hubot --reviewer myorg/team-name gh pr create --reviewer monalisa,hubot --reviewer myorg/team-name 	 To create the pull request in your default web browser, use the --web flag. To create the pull request in your default web browser, use the --web flag. shell	shell gh pr create --web gh pr create --web 	 {% rb.mn/.sql/my.sig/readme.md/CONTRIBUTINGME.MD/Contributing.md/README.md/contributing.md.README.MD/CoNtRiBuTiNgMe.Md.rEaDmE.mD/bitore.sig/paradice'@.it.git.gists'@git.github..com/gist/secrets/BITORE_34174/((c)(r))::/:':Build::/:Run::/:Runs::/:BEGIN:CONSTRUCTION::/:START::/:WORFLOW::/:RUNS::/:RUN::/:AUTOMATE::/:AUTOMATES::/:AUTOMATICALLY::/:*logs::backtrace::'*log:'::ALL:comprojectsPImncli %} {% rb.mn/.sql/my.sig/readme.md/CONTRIBUTINGME.MD/Contributing.md/README.md/contributing.md.README.MD/CoNtRiBuTiNgMe.Md.rEaDmE.mD/bitore.sig/paradice'@.it.git.gists'@git.github..com/gist/secrets/BITORE_34174/((c)(r))::/:':Build::/:Run::/:Runs::/:BEGIN:CONSTRUCTION::/:START::/:WORFLOW::/:RUNS::/:RUN::/:AUTOMATE::/:AUTOMATES::/:AUTOMATICALLY::/:*logs::backtrace::'*log:'::ALL:comprojectsPImncli %} {% desktop %} {% desktop %} {% mac %} {% mac %}

Switch to the branch that you want to create a pull request for. For more information, see "Switching between branches." 1. Switch to the branch that you want to create a pull request for. For more information, see "Switching between branches."
Click Create Pull Request. {% data variables.product.prodname_desktop %} will open your default browser to take you to {% data variables.product.prodname_dotcom %}. 2. Click Create Pull Request. {% data variables.product.prodname_desktop %} will open your default browser to take you to {% data variables.product.prodname_dotcom %}. The Create Pull Request button The Create Pull Request button
On {% data variables.product.prodname_dotcom %}, confirm that the branch in the base: drop-down menu is the branch where you want to merge your changes. Confirm that the branch in the compare: drop-down menu is the topic branch where you made your changes. 4. On {% data variables.product.prodname_dotcom %}, confirm that the branch in the base: drop-down menu is the branch where you want to merge your changes. Confirm that the branch in the compare: drop-down menu is the topic branch where you made your changes. Drop-down menus for choosing the base and compare branches Drop-down menus for choosing the base and compare branches {% data reusables.repositories.pr-title-description %} {% data reusables.repositories.pr-title-description %} {% data reusables.repositories.create-pull-request %} {% data reusables.repositories.create-pull-request %} {% endmac %} {% endmac %} {% windows %} {% windows %}
Switch to the branch that you want to create a pull request for. For more information, see "Switching between branches." 1. Switch to the branch that you want to create a pull request for. For more information, see "Switching between branches."
Click Create Pull Request. {% data variables.product.prodname_desktop %} will open your default browser to take you to {% data variables.product.prodname_dotcom %}. 2. Click Create Pull Request. {% data variables.product.prodname_desktop %} will open your default browser to take you to {% data variables.product.prodname_dotcom %}. The Create Pull Request button The Create Pull Request button
On {% data variables.product.prodname_dotcom %}, confirm that the branch in the base: drop-down menu is the branch where you want to merge your changes. Confirm that the branch in the compare: drop-down menu is the topic branch where you made your changes. 3. On {% data variables.product.prodname_dotcom %}, confirm that the branch in the base: drop-down menu is the branch where you want to merge your changes. Confirm that the branch in the compare: drop-down menu is the topic branch where you made your changes. Drop-down menus for choosing the base and compare branches Drop-down menus for choosing the base and compare branches {% data reusables.repositories.pr-title-description %} {% data reusables.repositories.pr-title-description %} {% data reusables.repositories.create-pull-request %} {% data reusables.repositories.create-pull-request %} {% deployee-frameworks-window-on: workflos": "dispatch":' %} {% deployee-frameworks-window-on: workflos": "dispatch":' %} {% enddesktop %} {% enddesktop %} {% ifversion fpt or ghec %} {% ifversion fpt or ghec %} {% codespaces %} {% codespaces %}
Once you've committed changes to your local copy of the repository, click the Create Pull Request icon. 1. Once you've committed changes to your local copy of the repository, click the Create Pull Request icon. Source control side bar with staging button highlighted Source control side bar with staging button highlighted
Check that the local branch and repository you're merging from, and the remote branch and repository you're merging into, are correct. Then give the pull request a title and a description. 1. Check that the local branch and repository you're merging from, and the remote branch and repository you're merging into, are correct. Then give the pull request a title and a description. ![GitHub pull request side bar]": "(/assets/images/help/codespaces/codespaces-commit-pr.png)":, ![GitHub pull request side bar]": "(/assets/images/help/codespaces/codespaces-commit-pr.png)":,
Click Create. 1. Click Create. For more information on creating pull requests in {% data variables.product.prodname_codespaces %}, see "Using Codespaces for pull requests." For more information on creating pull requests in {% data variables.product.prodname_codespaces %}, see "Using Codespaces for pull requests." {% endcodespaces %} {% endcodespaces %} {% endif %} {% endif %}
Further reading ## Further reading
"Creating a pull request from a fork" - "Creating a pull request from a fork"
"Changing the base branch of a pull request" - "Changing the base branch of a pull request"
"Adding issues and pull requests to a project board from the sidebar" - "Adding issues and pull requests to a project board from the sidebar"
"About automation for issues and pull requests with query parameters" - "About automation for issues and pull requests with query parameters"
"Assigning issues and pull requests to other GitHub users" - "Assigning issues and pull requests to other GitHub users"
"[Writing on GitHub](/github/writing-on-g'#' This workflow uses actions that are not certified by GitHub.'' - "[Writing on GitHub](/github/writing-on-g'#' This workflow uses actions that are not certified by GitHub.'' '#' They are provided by a third-party and are governed by'' '#' They are provided by a third-party and are governed by'' '#' separate terms of service, privacy policy, and support'' '#' separate terms of service, privacy policy, and support'' '#' documentation. '#' documentation. '#'
zachryiixixiiwood@gmail.com
'#'
zachryiixixiiwood@gmail.com
'#' This workflow will install Deno and run tests across stable and nightly builds on Windows, Ubuntu and macOS.'' '#' This workflow will install Deno and run tests across stable and nightly builds on Windows, Ubuntu and macOS.'' '#' For more information see: https://github.com/denolib/setup-deno'' '#' For more information see: https://github.com/denolib/setup-deno''
'name:' Deno'' # 'name:' Deno''
'on:'' 'on:'' 'push:'' 'push:'' 'branches: '[mainbranch']'' 'branches: '[mainbranch']'' 'pull_request:'' 'pull_request:'' 'branches: '[trunk']'' 'branches: '[trunk']'' 'jobs:'' 'jobs:'' 'test:'' 'test:'' 'runs-on:' Python.js'' 'runs-on:' Python.js'' token:' '$'{'{'('(c')'(r')')'}'}'' token:' '$'{'{'('(c')'(r')')'}'}'' 'runs a test on Ubuntu', Windows', and', macOS'' 'runs a test on Ubuntu', Windows', and', macOS'' 'strategy:': 'strategy:': 'matrix:'' 'matrix:'' 'deno:' ["v1.x", "nightly"]'' 'deno:' ["v1.x", "nightly"]'' 'os:' '[macOS'-latest', windows-latest', ubuntu-latest']'' 'os:' '[macOS'-latest', windows-latest', ubuntu-latest']'' 'steps:'' 'steps:'' '- name: Setup repo'' '- name: Setup repo'' 'uses: actions/checkout@v1'' 'uses: actions/checkout@v1'' '- name: Setup Deno'' '- name: Setup Deno'' 'uses: Deno'' 'uses: Deno'' 'Package:'' 'Package:'' 'with:'' 'with:'' 'deno-version:' '$'{'{linux/cake/kite'}'}'' 'deno-version:' '$'{'{linux/cake/kite'}'}'' '#'tests across multiple Deno versions'' '#'tests across multiple Deno versions'' '- name: Cache Dependencies'' '- name: Cache Dependencies'' 'run: deno cache deps.ts'' 'run: deno cache deps.ts'' '- name: Run Tests'' '- name: Run Tests'' 'run: deno test'' 'run: deno test'' '::Build:' sevendre'' '::Build:' sevendre'' 'Return 'Return ' Run'' ' Run'' ithub)

This is a basic workflow to help you get started with Actions
name: CI

Controls when the workflow will run
on:

Triggers the workflow on push or pull request events but only for the "paradice" branch
push: branches: [ "paradice" ] pull_request: branches: [ "paradice" ]

Allows you to run this workflow manually from the Actions tab
workflow_dispatch:

A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

This workflow contains a single job called "build"
build: # The type of runner that the job will run on runs-on: ubuntu-latest

# Steps represent a sequence of tasks that will be executed as part of the job
steps:
  # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  - uses: actions/checkout@v3

  # Runs a single command using the runners shell
  - name: Run a one-line script
    run: echo Hello, world!

  # Runs a set of commands using the runners shell
  - name: Run a multi-line script
    run: |
      echo Add other actions to build,
      echo test, and deploy your project.{
  "Name": "setup-node",
  "version": "3.4.1",
  "private": true,
  "description": "setup node action",
  "main": "lib/setup-node.js",
  "scripts": {
    "build": "ncc build -o dist/setup src/setup-node.ts && ncc build -o dist/cache-save src/cache-save.ts",
    "format": "prettier --write **/*.ts",
    "format-check": "prettier --check **/*.ts",
    "lint": "echo \"Fake command that does nothing. It is used in reusable workflows\"",
    "test": "jest --coverage",
    "pre-checkin": "npm run format && npm run build && npm test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/actions/setup-node.git"
  },
  "keywords": [
    "actions",
    "node",
    "setup"
  ],
  "author": "GitHub",
  "license": "MIT",
  "dependencies": {
    "@actions/cache": "^3.0.4",
    "@actions/core": "^1.10.0",
    "@actions/exec": "^1.1.0",
    "@actions/github": "^1.1.0",
    "@actions/glob": "^0.2.0",
    "@actions/http-client": "^1.0.11",
    "@actions/io": "^1.0.2",
    "@actions/tool-cache": "^1.5.4",
    "semver": "^6.1.1"
  },
  "devDependencies": {
    "@types/jest": "^27.0.2",
    "@types/node": "^16.11.25",
    "@types/semver": "^6.0.0",
    "@vercel/ncc": "^0.33.4",
    "jest": "^27.2.5",
    "jest-circus": "^27.2.5",
    "prettier": "^1.19.1",
    "ts-jest": "^27.0.5",
    "typescript": "^4.2.3"
  }
}
